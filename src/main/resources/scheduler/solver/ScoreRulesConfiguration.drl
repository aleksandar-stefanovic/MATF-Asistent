package scheduler.solver;
dialect  "java"

import scheduler.Timetable
import scheduler.TimetableConstraintConfiguration
import scheduler.Day
import data.Course
import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder
import org.kie.api.runtime
import org.kie.api.runtime
import org.kie.api.runtime

global HardSoftScoreHolder scoreHolder;

rule "Day conflict"
    when
        Course(assignedDay != null, assignedDay != dayOfWeek)
    then
        scoreHolder.penalize((org.kie.api.runtime.rule.RuleContext) kcontext);
 end

 rule "Course conflict"
    when
        $first: Course(assignedDay != null, $day: dayOfWeek, $title: title, $classrom: classroom)
        Course(assignedDay != null, $day == dayOfWeek, $title == title, $clasroom: classroom, calculateIntervalBetween($first) < 0)
    then
        scoreHolder.penalize((org.kie.api.runtime.rule.RuleContext) kcontext);
 end

 rule "One type"
    when
        Course(assignedDay != null, $title: title, $type: type)
        Course(assignedDay != null, $title == title, $type == type)
    then
        scoreHolder.penalize((org.kie.api.runtime.rule.RuleContext) kcontext);
 end

 rule "Room conflict"
    when
        $first: Course(assignedDay != null, $classroom: classroom)
        Course(assignedDay != null, calculateIntervalBetween($first) == 0, $classroom != classroom)
    then
        scoreHolder.penalize((org.kie.api.runtime.rule.RuleContext) kcontext);
 end

 rule "Minimize breaks"
    when
        $first: Course(assignedDay != null, $title: title, $classroom: classroom)
        $second: Course(assignedDay != null, $title != title, $classroom != classroom, calculateIntervalBetween($first)>0)
    then
        scoreHolder.addSoftConstraintMatch((org.kie.api.runtime.rule.RuleContext) kcontext, - $first.calculateIntervalBetween($second));
 end



